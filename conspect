1. Data Classes
---------------
data class Person (val a, val b)

Их инстансы неизменяемые. Для модификации применяется метод copy. Такие классы не наследуются.

2. Smart Cast
---------------
Если один раз прочекали совпадение типа, то потом истользуем переменную без каста.
Если чекалка прошла успешно, то каст выполняется автоматически, неявно.

if(value is String) {
  println(vlaue.toUpperCase())
}

3. Операторы, являющиеся выражениями (то есть возвращают значение):

- if else
- when else
- try/catch (finaly ничего не возвращает)

4. Функции могут иметь два типа body

Block body (нужен return, если что-то возвращаем)
--------------
fun someOp(): Int {
  val a = 1
  val b = 2
  ....
  
  return ...
}

Expression body (return не нужен и фиг скобки тоже)
---------------
fun someProc (a: Int, b: Int): Boolean = a > b

5. Property - это комбинация гетера/сетера и field

6. У каждой val/var автоматически создаются аксессоры, но если нужна их кастомизация, то пишем код явно

Пример: у переменной isSquare нет явного значения, однако есть гетер, который его вычисляет

val isSquare: Boolean
  get() {
    return width == height
  }

7. Packages
------------
Каждый файл принадлежит пакету (пакет указан в самом начале файла). Имя публичного класса не обязано совпадать с имененм своего файла.

8. Оператор When
-------------------
- можно чекать по енумам
- можно чекать по инстансам любого класса (when используется equal для сравнения)
- можно чекать тип через is
- можно вообще использовать when без аргумента. Тогда все проверки уходят во внутренние операторы

when {
  a > 10 && c < 20 -> (a + c)
  a < 8 && c > 20 -> (c - a)
}

- вроде ещё можно чекать попадание значения в range, например так

when (value) {
  in 1..10 -> 
  in 20..100 ->
}

9. Ranges
--------------

val oneToTen = 1..10 (inclusive range)

val oneToNine = 1 until 10 (inclusive range)


Если класс реализует Comparable, то из его инстансов можно задать range. Пройтись по элементам такого ранга нельзя,
но зато можно использовать для проверки попадания в него других инстансов (стр 46). Например:

println("Kotlin" in "Java".."Scala")
> true

Это потому, что в алфавитном порядке "Kotlin" между двумя другими словами.


10. Доступ к элементам Map
---------------------------

- есть методы get() и put()
  myMap.put(k, v)

- или а-ля массив: myMap[key] = value


Создание и инициализация Map'ы:

val myMap = mapOf("key1" to 1, "key2" to 2)


11. Exceptions
------------------
Если функция бросает исключение, то писать throws в её декларации не нужно, а в джаве нужно.


12. Top Level функции
-------------------------
Функции можно объявлять вне классов. Тогда они должны располагаться в файле сразу ПОСЛЕ названия пакета и ДО декларации классов.
Такие функции принадлежат пакету, указанному в файле, а компилятор помещает их как static в класс, имеющем имя файла. Во как.








